---
import { IoSunny, IoMoon } from "react-icons/io5";
---

<button id="themeToggle" class="flex justify-center items-center">
  <span class="icon hidden dark:block"
    ><IoSunny client:load className="text-white" /></span
  >
  <span class="icon block dark:hidden"
    ><IoMoon client:load className="text-gray-700" /></span
  >
  <!-- {
    import.meta.env.MODE == "development" && (
      <span id="theme_label" class="ml-4 text-sm bg-rose-300 px-2 py-1 text-black">
      </span>
    )
  } -->
</button>

<script is:inline>
  const setToggleListener = () => {
    let toggleBtn = document.getElementById("themeToggle");
    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
      
      const label = document.getElementById("theme_label");
      if (label) {
        label.textContent = isDark ? "Dark theme" : "Light theme";
      }
    };

    toggleBtn?.addEventListener("click", handleToggleClick);
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setToggleListener);
  } else {
    setToggleListener();
  }

  // Re-initialize after Astro page transitions
  document.addEventListener("astro:after-swap", setToggleListener);
  
  // Update label if it exists
  const updateLabel = () => {
    const label = document.getElementById("theme_label");
    if (label) {
      const isDark = document.documentElement.classList.contains("dark");
      label.textContent = isDark ? "Dark theme" : "Light theme";
    }
  };
  
  // Update label on load and after transitions
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateLabel);
  } else {
    updateLabel();
  }
  document.addEventListener("astro:after-swap", updateLabel);
</script>
