---
import { IoSunny, IoMoon } from "react-icons/io5";
---

<button id="themeToggle" class="flex justify-center items-center">
  <span class="icon hidden dark:block"
    ><IoSunny client:load className="text-white" /></span
  >
  <span class="icon block dark:hidden"
    ><IoMoon client:load className="text-gray-700" /></span
  >
  <!-- {
    import.meta.env.MODE == "development" && (
      <span id="theme_label" class="ml-4 text-sm bg-rose-300 px-2 py-1 text-black">
      </span>
    )
  } -->
</button>

<script is:inline>
  // Get the current theme from localStorage or system preference
  const getCurrentTheme = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  };

  // Apply theme to document
  const applyTheme = (theme) => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    localStorage.setItem("theme", theme);
  };

  // Initialize theme immediately
  const initTheme = () => {
    const theme = getCurrentTheme();
    applyTheme(theme);
    updateLabel();
  };

  const setToggleListener = () => {
    let toggleBtn = document.getElementById("themeToggle");
    const handleToggleClick = () => {
      const element = document.documentElement;
      const isDark = element.classList.contains("dark");
      const newTheme = isDark ? "light" : "dark";
      
      applyTheme(newTheme);
      updateLabel();
    };

    toggleBtn?.addEventListener("click", handleToggleClick);
  };

  // Update label if it exists
  const updateLabel = () => {
    const label = document.getElementById("theme_label");
    if (label) {
      const isDark = document.documentElement.classList.contains("dark");
      label.textContent = isDark ? "Dark theme" : "Light theme";
    }
  };

  // Initialize everything
  const init = () => {
    initTheme();
    setToggleListener();
  };

  // Run initialization
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Re-initialize after Astro page transitions
  document.addEventListener("astro:after-swap", () => {
    initTheme();
    setToggleListener();
  });
</script>
